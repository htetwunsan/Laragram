version: '3.8'

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        expose:
            - 9000
        restart: unless-stopped
        environment:
            ROLE: app
            APPENV: ${APP_ENV:-production}
        volumes:
            - ./php.ini:/etc/php/8.1/cli/conf.d/php.ini
            - .:/var/www/html
        networks:
            - appnet
        depends_on:
            - pgsql
            - redis

    queue:
        build:
            context: .
            dockerfile: Dockerfile
        restart: unless-stopped
        environment:
            ROLE: queue
            APPENV: ${APP_ENV:-production}
        volumes:
            - ./php.ini:/etc/php/8.1/cli/conf.d/php.ini
            - .:/var/www/html
        networks:
            - appnet
        depends_on:
            - app

    scheduler:
        build:
            context: .
            dockerfile: Dockerfile
        restart: unless-stopped
        environment:
            ROLE: scheduler
            APPENV: ${APP_ENV:-production}
        volumes:
            - ./php.ini:/etc/php/8.1/cli/conf.d/php.ini
            - .:/var/www/html
        networks:
            - appnet
        depends_on:
            - app

    webserver:
        image: nginx:1.21.6-alpine
        ports:
            - '${APP_PORT:-8000}:80'
        restart: unless-stopped
        environment:
            - NGINX_HOST=localhost
            - NGINX_PORT=80
        volumes:
            - ./default.conf.template:/etc/nginx/templates/default.conf.template
            - .:/var/www/html
        networks:
            - appnet
        depends_on:
            - app
            - pgsql
            - redis

    pgsql:
        image: postgres:14.1-alpine3.15
        expose:
            - 5432
        restart: unless-stopped
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'pgsql-data:/var/lib/postgresql/data'
        networks:
            - appnet
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-q",
                    "-d",
                    "${DB_DATABASE}",
                    "-U",
                    "${DB_USERNAME}"
                ]
            retries: 3
            timeout: 5s

    redis:
        image: redis:6.2.6-alpine
        expose:
            - 6379
        restart: unless-stopped
        volumes:
            - 'redis-data:/data'
        networks:
            - appnet

networks:
    appnet:
        driver: bridge

volumes:
    pgsql-data:
        driver: local
    redis-data:
        driver: local
